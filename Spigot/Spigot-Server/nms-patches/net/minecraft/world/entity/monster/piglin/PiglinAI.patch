--- a/net/minecraft/world/entity/monster/piglin/PiglinAI.java
+++ b/net/minecraft/world/entity/monster/piglin/PiglinAI.java
@@ -73,6 +73,14 @@
 import net.minecraft.world.level.storage.loot.parameters.LootContextParameters;
 import net.minecraft.world.phys.Vec3D;
 
+// CraftBukkit start
+import java.util.stream.Collectors;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.craftbukkit.inventory.CraftItemStack;
+import org.bukkit.event.entity.EntityRemoveEvent;
+import org.bukkit.event.entity.PiglinBarterEvent;
+// CraftBukkit end
+
 public class PiglinAI {
 
     public static final int REPELLENT_DETECTION_RANGE_HORIZONTAL = 8;
@@ -147,7 +155,8 @@
     private static void initFightActivity(EntityPiglin entitypiglin, BehaviorController<EntityPiglin> behaviorcontroller) {
         behaviorcontroller.addActivityAndRemoveMemoryWhenStopped(Activity.FIGHT, 10, ImmutableList.of(BehaviorAttackTargetForget.create((worldserver, entityliving) -> {
             return !isNearestValidAttackTarget(worldserver, entitypiglin, entityliving);
-        }), BehaviorBuilder.triggerIf(PiglinAI::hasCrossbow, BehaviorRetreat.create(5, 0.75F)), BehaviorWalkAwayOutOfRange.create(1.0F), BehaviorAttack.create(20), new BehaviorCrossbowAttack(), BehaviorRememberHuntedHoglin.create(), BehaviorRemoveMemory.create(PiglinAI::isNearZombified, MemoryModuleType.ATTACK_TARGET)), MemoryModuleType.ATTACK_TARGET);
+            // CraftBukkit - decompile error
+        }), BehaviorBuilder.triggerIf(PiglinAI::hasCrossbow, BehaviorRetreat.create(5, 0.75F)), BehaviorWalkAwayOutOfRange.create(1.0F), BehaviorAttack.create(20), new BehaviorCrossbowAttack<>(), BehaviorRememberHuntedHoglin.create(), BehaviorRemoveMemory.create(PiglinAI::isNearZombified, MemoryModuleType.ATTACK_TARGET)), MemoryModuleType.ATTACK_TARGET);
     }
 
     private static void initCelebrateActivity(BehaviorController<EntityPiglin> behaviorcontroller) {
@@ -155,7 +164,8 @@
             return entitypiglin.isAdult();
         }, PiglinAI::findNearestValidAttackTarget), BehaviorBuilder.triggerIf((entitypiglin) -> {
             return !entitypiglin.isDancing();
-        }, GoToTargetLocation.create(MemoryModuleType.CELEBRATE_LOCATION, 2, 1.0F)), BehaviorBuilder.triggerIf(EntityPiglin::isDancing, GoToTargetLocation.create(MemoryModuleType.CELEBRATE_LOCATION, 4, 0.6F)), new BehaviorGateSingle(ImmutableList.of(Pair.of(BehaviorLookTarget.create(EntityTypes.PIGLIN, 8.0F), 1), Pair.of(BehaviorStrollRandomUnconstrained.stroll(0.6F, 2, 1), 1), Pair.of(new BehaviorNop(10, 20), 1)))), MemoryModuleType.CELEBRATE_LOCATION);
+            // CraftBukkit - decompile error
+        }, GoToTargetLocation.create(MemoryModuleType.CELEBRATE_LOCATION, 2, 1.0F)), BehaviorBuilder.triggerIf(EntityPiglin::isDancing, GoToTargetLocation.create(MemoryModuleType.CELEBRATE_LOCATION, 4, 0.6F)), new BehaviorGateSingle<>(ImmutableList.of(Pair.of(BehaviorLookTarget.create(EntityTypes.PIGLIN, 8.0F), 1), Pair.of(BehaviorStrollRandomUnconstrained.stroll(0.6F, 2, 1), 1), Pair.of(new BehaviorNop(10, 20), 1)))), MemoryModuleType.CELEBRATE_LOCATION);
     }
 
     private static void initAdmireItemActivity(BehaviorController<EntityPiglin> behaviorcontroller) {
@@ -167,7 +177,8 @@
     }
 
     private static void initRideHoglinActivity(BehaviorController<EntityPiglin> behaviorcontroller) {
-        behaviorcontroller.addActivityAndRemoveMemoryWhenStopped(Activity.RIDE, 10, ImmutableList.of(BehaviorStartRiding.create(0.8F), BehaviorLookTarget.create(PiglinAI::isPlayerHoldingLovedItem, 8.0F), BehaviorBuilder.sequence(BehaviorBuilder.triggerIf(Entity::isPassenger), TriggerGate.triggerOneShuffled(ImmutableList.builder().addAll(createLookBehaviors()).add(Pair.of(BehaviorBuilder.triggerIf((entitypiglin) -> {
+        // CraftBukkit - decompile error
+        behaviorcontroller.addActivityAndRemoveMemoryWhenStopped(Activity.RIDE, 10, ImmutableList.of(BehaviorStartRiding.create(0.8F), BehaviorLookTarget.create(PiglinAI::isPlayerHoldingLovedItem, 8.0F), BehaviorBuilder.sequence(BehaviorBuilder.triggerIf(Entity::isPassenger), TriggerGate.triggerOneShuffled(ImmutableList.<Pair<? extends net.minecraft.world.entity.ai.behavior.declarative.Trigger<? super EntityLiving>, Integer>>builder().addAll(createLookBehaviors()).add(Pair.of(BehaviorBuilder.triggerIf((entitypiglin) -> {
             return true;
         }), 1)).build())), BehaviorStopRiding.create(8, PiglinAI::wantsToStopRiding)), MemoryModuleType.RIDE_TARGET);
     }
@@ -177,7 +188,7 @@
     }
 
     private static BehaviorGateSingle<EntityLiving> createIdleLookBehaviors() {
-        return new BehaviorGateSingle<EntityLiving>(ImmutableList.builder().addAll(createLookBehaviors()).add(Pair.of(new BehaviorNop(30, 60), 1)).build());
+        return new BehaviorGateSingle<EntityLiving>(ImmutableList.<Pair<? extends BehaviorControl<? super EntityLiving>, Integer>>builder().addAll(createLookBehaviors()).add(Pair.of(new BehaviorNop(30, 60), 1)).build()); // CraftBukkit - decompile error
     }
 
     private static BehaviorGateSingle<EntityPiglin> createIdleMovementBehaviors() {
@@ -198,13 +209,13 @@
 
     protected static void updateActivity(EntityPiglin entitypiglin) {
         BehaviorController<EntityPiglin> behaviorcontroller = entitypiglin.getBrain();
-        Activity activity = (Activity) behaviorcontroller.getActiveNonCoreActivity().orElse((Object) null);
+        Activity activity = (Activity) behaviorcontroller.getActiveNonCoreActivity().orElse(null); // CraftBukkit - decompile error
 
         behaviorcontroller.setActiveActivityToFirstValid(ImmutableList.of(Activity.ADMIRE_ITEM, Activity.FIGHT, Activity.AVOID, Activity.CELEBRATE, Activity.RIDE, Activity.IDLE));
-        Activity activity1 = (Activity) behaviorcontroller.getActiveNonCoreActivity().orElse((Object) null);
+        Activity activity1 = (Activity) behaviorcontroller.getActiveNonCoreActivity().orElse(null); // CraftBukkit - decompile error
 
         if (activity != activity1) {
-            Optional optional = getSoundForCurrentActivity(entitypiglin);
+            Optional<SoundEffect> optional = getSoundForCurrentActivity(entitypiglin); // CraftBukkit - decompile error
 
             Objects.requireNonNull(entitypiglin);
             optional.ifPresent(entitypiglin::makeSound);
@@ -236,23 +247,27 @@
         stopWalking(entitypiglin);
         ItemStack itemstack;
 
-        if (entityitem.getItem().is(Items.GOLD_NUGGET)) {
+        // CraftBukkit start
+        if (entityitem.getItem().is(Items.GOLD_NUGGET) && !org.bukkit.craftbukkit.event.CraftEventFactory.callEntityPickupItemEvent(entitypiglin, entityitem, 0, false).isCancelled()) {
             entitypiglin.take(entityitem, entityitem.getItem().getCount());
             itemstack = entityitem.getItem();
-            entityitem.discard();
-        } else {
+            entityitem.discard(EntityRemoveEvent.Cause.PICKUP); // CraftBukkit - add Bukkit remove cause
+        } else if (!org.bukkit.craftbukkit.event.CraftEventFactory.callEntityPickupItemEvent(entitypiglin, entityitem, entityitem.getItem().getCount() - 1, false).isCancelled()) {
             entitypiglin.take(entityitem, 1);
             itemstack = removeOneItemFromItemEntity(entityitem);
+        } else {
+            return;
         }
+        // CraftBukkit end
 
-        if (isLovedItem(itemstack)) {
+        if (isLovedItem(itemstack, entitypiglin)) { // CraftBukkit - Changes to allow for custom payment in bartering
             entitypiglin.getBrain().eraseMemory(MemoryModuleType.TIME_TRYING_TO_REACH_ADMIRE_ITEM);
             holdInOffhand(worldserver, entitypiglin, itemstack);
             admireGoldItem(entitypiglin);
         } else if (isFood(itemstack) && !hasEatenRecently(entitypiglin)) {
             eat(entitypiglin);
         } else {
-            boolean flag = !entitypiglin.equipItemIfPossible(worldserver, itemstack).equals(ItemStack.EMPTY);
+            boolean flag = !entitypiglin.equipItemIfPossible(worldserver, itemstack, entityitem).equals(ItemStack.EMPTY); // CraftBukkit
 
             if (!flag) {
                 putInInventory(entitypiglin, itemstack);
@@ -273,7 +288,7 @@
         ItemStack itemstack1 = itemstack.split(1);
 
         if (itemstack.isEmpty()) {
-            entityitem.discard();
+            entityitem.discard(EntityRemoveEvent.Cause.PICKUP); // CraftBukkit - add Bukkit remove cause
         } else {
             entityitem.setItem(itemstack);
         }
@@ -286,10 +301,15 @@
 
         entitypiglin.setItemInHand(EnumHand.OFF_HAND, ItemStack.EMPTY);
         if (entitypiglin.isAdult()) {
-            boolean flag1 = isBarterCurrency(itemstack);
+            boolean flag1 = isBarterCurrency(itemstack, entitypiglin); // CraftBukkit - Changes to allow custom payment for bartering
 
             if (flag && flag1) {
-                throwItems(entitypiglin, getBarterResponseItems(entitypiglin));
+                // CraftBukkit start
+                PiglinBarterEvent event = CraftEventFactory.callPiglinBarterEvent(entitypiglin, getBarterResponseItems(entitypiglin), itemstack);
+                if (!event.isCancelled()) {
+                    throwItems(entitypiglin, event.getOutcome().stream().map(CraftItemStack::asNMSCopy).collect(Collectors.toList()));
+                }
+                // CraftBukkit end
             } else if (!flag1) {
                 boolean flag2 = !entitypiglin.equipItemIfPossible(worldserver, itemstack).isEmpty();
 
@@ -303,7 +323,7 @@
             if (!flag3) {
                 ItemStack itemstack1 = entitypiglin.getMainHandItem();
 
-                if (isLovedItem(itemstack1)) {
+                if (isLovedItem(itemstack1, entitypiglin)) { // CraftBukkit - Changes to allow for custom payment in bartering
                     putInInventory(entitypiglin, itemstack1);
                 } else {
                     throwItems(entitypiglin, Collections.singletonList(itemstack1));
@@ -377,7 +397,7 @@
             return false;
         } else if (isAdmiringDisabled(entitypiglin) && entitypiglin.getBrain().hasMemoryValue(MemoryModuleType.ATTACK_TARGET)) {
             return false;
-        } else if (isBarterCurrency(itemstack)) {
+        } else if (isBarterCurrency(itemstack, entitypiglin)) { // CraftBukkit
             return isNotHoldingLovedItemInOffHand(entitypiglin);
         } else {
             boolean flag = entitypiglin.canAddToInventory(itemstack);
@@ -386,6 +406,12 @@
         }
     }
 
+    // CraftBukkit start - Added method to allow checking for custom payment items
+    protected static boolean isLovedItem(ItemStack itemstack, EntityPiglin piglin) {
+        return isLovedItem(itemstack) || (piglin.interestItems.contains(itemstack.getItem()) || piglin.allowedBarterItems.contains(itemstack.getItem()));
+    }
+    // CraftBukkit end
+
     protected static boolean isLovedItem(ItemStack itemstack) {
         return itemstack.is(TagsItem.PIGLIN_LOVED);
     }
@@ -479,7 +505,7 @@
     }
 
     protected static boolean canAdmire(EntityPiglin entitypiglin, ItemStack itemstack) {
-        return !isAdmiringDisabled(entitypiglin) && !isAdmiringItem(entitypiglin) && entitypiglin.isAdult() && isBarterCurrency(itemstack);
+        return !isAdmiringDisabled(entitypiglin) && !isAdmiringItem(entitypiglin) && entitypiglin.isAdult() && isBarterCurrency(itemstack, entitypiglin); // CraftBukkit
     }
 
     protected static void wasHurtBy(WorldServer worldserver, EntityPiglin entitypiglin, EntityLiving entityliving) {
@@ -727,6 +753,12 @@
         return entitypiglin.getBrain().hasMemoryValue(MemoryModuleType.ADMIRING_ITEM);
     }
 
+    // CraftBukkit start - Changes to allow custom payment for bartering
+    private static boolean isBarterCurrency(ItemStack itemstack, EntityPiglin piglin) {
+        return isBarterCurrency(itemstack) || piglin.allowedBarterItems.contains(itemstack.getItem());
+    }
+    // CraftBukkit end
+
     private static boolean isBarterCurrency(ItemStack itemstack) {
         return itemstack.is(PiglinAI.BARTERING_ITEM);
     }
@@ -764,7 +796,7 @@
     }
 
     private static boolean isNotHoldingLovedItemInOffHand(EntityPiglin entitypiglin) {
-        return entitypiglin.getOffhandItem().isEmpty() || !isLovedItem(entitypiglin.getOffhandItem());
+        return entitypiglin.getOffhandItem().isEmpty() || !isLovedItem(entitypiglin.getOffhandItem(), entitypiglin); // CraftBukkit - Changes to allow custom payment for bartering
     }
 
     public static boolean isZombified(EntityTypes<?> entitytypes) {
