--- a/net/minecraft/world/entity/animal/horse/EntityHorseAbstract.java
+++ b/net/minecraft/world/entity/animal/horse/EntityHorseAbstract.java
@@ -74,6 +74,12 @@
 import net.minecraft.world.phys.Vec2F;
 import net.minecraft.world.phys.Vec3D;
 
+// CraftBukkit start
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.entity.AbstractHorse;
+import org.bukkit.event.entity.EntityRegainHealthEvent;
+// CraftBukkit end
+
 public abstract class EntityHorseAbstract extends EntityAnimal implements HasCustomInventoryScreen, OwnableEntity, IJumpable {
 
     public static final int CHEST_SLOT_OFFSET = 499;
@@ -144,6 +150,7 @@
     protected int gallopSoundCounter;
     @Nullable
     public EntityReference<EntityLiving> owner;
+    public int maxDomestication = 100; // CraftBukkit - store max domestication value
 
     protected EntityHorseAbstract(EntityTypes<? extends EntityHorseAbstract> entitytypes, World world) {
         super(entitytypes, world);
@@ -323,7 +330,7 @@
     public void createInventory() {
         InventorySubcontainer inventorysubcontainer = this.inventory;
 
-        this.inventory = new InventorySubcontainer(this.getInventorySize());
+        this.inventory = new InventorySubcontainer(this.getInventorySize(), (AbstractHorse) this.getBukkitEntity()); // CraftBukkit
         if (inventorysubcontainer != null) {
             int i = Math.min(inventorysubcontainer.getContainerSize(), this.inventory.getContainerSize());
 
@@ -412,7 +419,7 @@
     }
 
     public int getMaxTemper() {
-        return 100;
+        return this.maxDomestication; // CraftBukkit - return stored max domestication instead of 100
     }
 
     @Override
@@ -483,7 +490,7 @@
         }
 
         if (this.getHealth() < this.getMaxHealth() && f > 0.0F) {
-            this.heal(f);
+            this.heal(f, EntityRegainHealthEvent.RegainReason.EATING); // CraftBukkit
             flag = true;
         }
 
@@ -560,7 +567,7 @@
         if (world instanceof WorldServer worldserver) {
             if (this.isAlive()) {
                 if (this.random.nextInt(900) == 0 && this.deathTime == 0) {
-                    this.heal(1.0F);
+                    this.heal(1.0F, EntityRegainHealthEvent.RegainReason.REGEN); // CraftBukkit
                 }
 
                 if (this.canEatGrass()) {
@@ -825,6 +832,7 @@
         if (this.owner != null) {
             this.owner.store(nbttagcompound, "Owner");
         }
+        nbttagcompound.putInt("Bukkit.MaxDomestication", this.maxDomestication); // CraftBukkit
 
     }
 
@@ -836,6 +844,9 @@
         this.setTemper(nbttagcompound.getIntOr("Temper", 0));
         this.setTamed(nbttagcompound.getBooleanOr("Tame", false));
         this.owner = EntityReference.<EntityLiving>readWithOldOwnerConversion(nbttagcompound, "Owner", this.level());
+        // CraftBukkit start
+        this.maxDomestication = nbttagcompound.getIntOr("Bukkit.MaxDomestication", this.maxDomestication);
+        // CraftBukkit end
     }
 
     @Override
@@ -929,6 +940,17 @@
 
     @Override
     public void handleStartJump(int i) {
+        // CraftBukkit start
+        float power;
+        if (i >= 90) {
+            power = 1.0F;
+        } else {
+            power = 0.4F + 0.4F * (float) i / 90.0F;
+        }
+        if (!CraftEventFactory.callHorseJumpEvent(this, power)) {
+            return;
+        }
+        // CraftBukkit end
         this.allowStandSliding = true;
         this.standIfPossible();
         this.playJumpSound();
