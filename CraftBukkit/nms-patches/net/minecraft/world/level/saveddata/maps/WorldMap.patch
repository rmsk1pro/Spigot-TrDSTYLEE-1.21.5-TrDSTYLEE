--- a/net/minecraft/world/level/saveddata/maps/WorldMap.java
+++ b/net/minecraft/world/level/saveddata/maps/WorldMap.java
@@ -41,6 +41,16 @@
 import net.minecraft.world.level.saveddata.SavedDataType;
 import org.slf4j.Logger;
 
+// CraftBukkit start
+import java.util.UUID;
+import net.minecraft.server.MinecraftServer;
+import org.bukkit.Bukkit;
+import org.bukkit.craftbukkit.CraftWorld;
+import org.bukkit.craftbukkit.map.CraftMapCursor;
+import org.bukkit.craftbukkit.map.CraftMapView;
+import org.bukkit.craftbukkit.util.CraftChatMessage;
+// CraftBukkit end
+
 public class WorldMap extends PersistentBase {
 
     private static final Logger LOGGER = LogUtils.getLogger();
@@ -70,6 +80,14 @@
             return List.copyOf(worldmap.bannerMarkers.values());
         }), WorldMapFrame.CODEC.listOf().optionalFieldOf("frames", List.of()).forGetter((worldmap) -> {
             return List.copyOf(worldmap.frameMarkers.values());
+            // CraftBukkit start
+        }), Codec.LONG.optionalFieldOf("UUIDLeast", 0L).forGetter((worldmap) -> {
+            UUID uuid = worldmap.updateUUID();
+            return (uuid != null) ? uuid.getLeastSignificantBits() : 0L;
+        }), Codec.LONG.optionalFieldOf("UUIDMost", 0L).forGetter((worldmap) -> {
+            UUID uuid = worldmap.updateUUID();
+            return (uuid != null) ? uuid.getMostSignificantBits() : 0L;
+            // CraftBukkit end
         })).apply(instance, WorldMap::new);
     });
     public int centerX;
@@ -87,6 +105,46 @@
     private final Map<String, WorldMapFrame> frameMarkers;
     private int trackedDecorationCount;
 
+    // CraftBukkit start
+    public final CraftMapView mapView;
+    public UUID uniqueId = null;
+    public MapId id;
+
+    private static ResourceKey<World> getWorldKey(ResourceKey<World> resourcekey, long uuidLeast, long uuidMost) {
+        World lookup = MinecraftServer.getServer().getLevel(resourcekey);
+        if (lookup != null) {
+            return resourcekey;
+        }
+
+        if (uuidLeast != 0L && uuidMost != 0L) {
+            UUID uniqueId = new UUID(uuidMost, uuidLeast);
+
+            CraftWorld world = (CraftWorld) Bukkit.getWorld(uniqueId);
+            // Check if the stored world details are correct.
+            if (world == null) {
+                /* All Maps which do not have their valid world loaded are set to a dimension which hopefully won't be reached.
+                   This is to prevent them being corrupted with the wrong map data. */
+                // PAIL: Use Vanilla exception handling for now
+            } else {
+                return world.getHandle().dimension();
+            }
+        }
+        throw new IllegalArgumentException("Invalid map dimension: " + resourcekey);
+    }
+
+    @Nullable
+    private UUID updateUUID() {
+        if (this.uniqueId == null) {
+            World world = MinecraftServer.getServer().getLevel(this.dimension);
+            if (world != null) {
+                this.uniqueId = world.getWorld().getUID();
+            }
+        }
+
+        return this.uniqueId;
+    }
+    // CraftBukkit end
+
     public static SavedDataType<WorldMap> type(MapId mapid) {
         return new SavedDataType<WorldMap>(mapid.key(), () -> {
             throw new IllegalStateException("Should never create an empty map saved data");
@@ -107,17 +165,21 @@
         this.trackingPosition = flag;
         this.unlimitedTracking = flag1;
         this.locked = flag2;
+        // CraftBukkit start
+        updateUUID();
+        mapView = new CraftMapView(this);
     }
 
-    private WorldMap(ResourceKey<World> resourcekey, int i, int j, byte b0, ByteBuffer bytebuffer, boolean flag, boolean flag1, boolean flag2, List<MapIconBanner> list, List<WorldMapFrame> list1) {
-        this(i, j, (byte) MathHelper.clamp(b0, 0, 4), flag, flag1, flag2, resourcekey);
+    private WorldMap(ResourceKey<World> resourcekey, int i, int j, byte b0, ByteBuffer bytebuffer, boolean flag, boolean flag1, boolean flag2, List<MapIconBanner> list, List<WorldMapFrame> list1, long uuidLeast, long uuidMost) {
+        this(i, j, (byte) MathHelper.clamp(b0, 0, 4), flag, flag1, flag2, getWorldKey(resourcekey, uuidLeast, uuidMost));
+        // CraftBukkit end
         if (bytebuffer.array().length == 16384) {
             this.colors = bytebuffer.array();
         }
 
         for (MapIconBanner mapiconbanner : list) {
             this.bannerMarkers.put(mapiconbanner.getId(), mapiconbanner);
-            this.addDecoration(mapiconbanner.getDecoration(), (GeneratorAccess) null, mapiconbanner.getId(), (double) mapiconbanner.pos().getX(), (double) mapiconbanner.pos().getZ(), 180.0D, (IChatBaseComponent) mapiconbanner.name().orElse((Object) null));
+            this.addDecoration(mapiconbanner.getDecoration(), (GeneratorAccess) null, mapiconbanner.getId(), (double) mapiconbanner.pos().getX(), (double) mapiconbanner.pos().getZ(), 180.0D, (IChatBaseComponent) mapiconbanner.name().orElse(null)); // CraftBukkit - decompile error
         }
 
         for (WorldMapFrame worldmapframe : list1) {
@@ -400,7 +462,7 @@
 
             if (!this.isTrackedCountOverLimit(256)) {
                 this.bannerMarkers.put(mapiconbanner.getId(), mapiconbanner);
-                this.addDecoration(mapiconbanner.getDecoration(), generatoraccess, mapiconbanner.getId(), d0, d1, 180.0D, (IChatBaseComponent) mapiconbanner.name().orElse((Object) null));
+                this.addDecoration(mapiconbanner.getDecoration(), generatoraccess, mapiconbanner.getId(), d0, d1, 180.0D, (IChatBaseComponent) mapiconbanner.name().orElse(null)); // CraftBukkit - decompile error
                 this.setDirty();
                 return true;
             }
@@ -551,7 +613,7 @@
             this.player = entityhuman;
         }
 
-        private WorldMap.c createPatch() {
+        private WorldMap.c createPatch(byte[] buffer) { // CraftBukkit
             int i = this.minDirtyX;
             int j = this.minDirtyY;
             int k = this.maxDirtyX + 1 - this.minDirtyX;
@@ -560,7 +622,7 @@
 
             for (int i1 = 0; i1 < k; ++i1) {
                 for (int j1 = 0; j1 < l; ++j1) {
-                    abyte[i1 + j1 * k] = WorldMap.this.colors[i + i1 + (j + j1) * 128];
+                    abyte[i1 + j1 * k] = buffer[i + i1 + (j + j1) * 128]; // CraftBukkit
                 }
             }
 
@@ -570,19 +632,29 @@
         @Nullable
         Packet<?> nextUpdatePacket(MapId mapid) {
             WorldMap.c worldmap_c;
+            org.bukkit.craftbukkit.map.RenderData render = WorldMap.this.mapView.render((org.bukkit.craftbukkit.entity.CraftPlayer) this.player.getBukkitEntity()); // CraftBukkit
 
             if (this.dirtyData) {
                 this.dirtyData = false;
-                worldmap_c = this.createPatch();
+                worldmap_c = this.createPatch(render.buffer); // CraftBukkit
             } else {
                 worldmap_c = null;
             }
 
             Collection<MapIcon> collection;
 
-            if (this.dirtyDecorations && this.tick++ % 5 == 0) {
+            if ((true || this.dirtyDecorations) && this.tick++ % 5 == 0) { // CraftBukkit - custom maps don't update this yet
                 this.dirtyDecorations = false;
-                collection = WorldMap.this.decorations.values();
+                // CraftBukkit start
+                java.util.Collection<MapIcon> icons = new java.util.ArrayList<MapIcon>();
+
+                for (org.bukkit.map.MapCursor cursor : render.cursors) {
+                    if (cursor.isVisible()) {
+                        icons.add(new MapIcon(CraftMapCursor.CraftType.bukkitToMinecraftHolder(cursor.getType()), cursor.getX(), cursor.getY(), cursor.getDirection(), CraftChatMessage.fromStringOrOptional(cursor.getCaption())));
+                    }
+                }
+                collection = icons;
+                // CraftBukkit end
             } else {
                 collection = null;
             }
