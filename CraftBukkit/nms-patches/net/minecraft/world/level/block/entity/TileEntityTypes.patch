--- a/net/minecraft/world/level/block/entity/TileEntityTypes.java
+++ b/net/minecraft/world/level/block/entity/TileEntityTypes.java
@@ -68,7 +68,7 @@
     public static final TileEntityTypes<VaultBlockEntity> VAULT = register("vault", VaultBlockEntity::new, Blocks.VAULT);
     public static final TileEntityTypes<TestBlockEntity> TEST_BLOCK = register("test_block", TestBlockEntity::new, Blocks.TEST_BLOCK);
     public static final TileEntityTypes<TestInstanceBlockEntity> TEST_INSTANCE_BLOCK = register("test_instance_block", TestInstanceBlockEntity::new, Blocks.TEST_INSTANCE_BLOCK);
-    private static final Set<TileEntityTypes<?>> OP_ONLY_CUSTOM_DATA = Set.of(TileEntityTypes.COMMAND_BLOCK, TileEntityTypes.LECTERN, TileEntityTypes.SIGN, TileEntityTypes.HANGING_SIGN, TileEntityTypes.MOB_SPAWNER, TileEntityTypes.TRIAL_SPAWNER);
+    private static final Set<TileEntityTypes<?>> OP_ONLY_CUSTOM_DATA = Set.of(TileEntityTypes.COMMAND_BLOCK, TileEntityTypes.LECTERN, TileEntityTypes.SIGN, TileEntityTypes.HANGING_SIGN, TileEntityTypes.MOB_SPAWNER, TileEntityTypes.TRIAL_SPAWNER, TileEntityTypes.CHEST); // CraftBukkit
     private final TileEntityTypes.a<? extends T> factory;
     private final Set<Block> validBlocks;
     private final Holder.c<TileEntityTypes<?>> builtInRegistryHolder;
@@ -84,7 +84,7 @@
         }
 
         SystemUtils.fetchChoiceType(DataConverterTypes.BLOCK_ENTITY, s);
-        return (TileEntityTypes) IRegistry.register(BuiltInRegistries.BLOCK_ENTITY_TYPE, s, new TileEntityTypes(tileentitytypes_a, Set.of(ablock)));
+        return (TileEntityTypes) IRegistry.register(BuiltInRegistries.BLOCK_ENTITY_TYPE, s, new TileEntityTypes<>(tileentitytypes_a, Set.of(ablock))); // CraftBukkit - decompile error
     }
 
     private TileEntityTypes(TileEntityTypes.a<? extends T> tileentitytypes_a, Set<Block> set) {
